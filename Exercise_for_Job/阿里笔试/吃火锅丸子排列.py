#班上同学聚餐吃火锅，一锅煮了的M(1<=M<=50)个鱼丸和N(1<=N<=50)个肉丸，现欲将M个鱼丸和N个肉丸分到K(1<=K<=50)个碗中，允许有空碗，鱼丸和肉丸不允许混在同一个碗里，问共有多少种装法？假设碗足够大，能装50个鱼丸或者50个肉丸，碗之间也没有区别，因此当M=N=1，K=3时，只有1种装法，因为(1,1,0)(1,0,1)(0,1,1)被看作是同一种装法。
#两层for循环
#第一层确定空的碗的个数
#第二层确定分给鱼丸的碗的个数（至少为1），分给肉丸的碗的个数（至少为1），调用dp递归。
#dp算法：盒同，球同，非空：dp(n,m)《n球，m盒》
#0                                  m>n
#1                                  m=1
#dp(n,m) = dp(n-1,m-1)+dp(n-m,m)    otherwise
M = int(input())
N = int(input())
K = int(input())
zong_keneng =K-M-N
print(zong_keneng)